<?xml version="1.0" encoding="utf-8"?>
<appendix
	version="5.0"
	xml:id="design_patterns"
	xml:lang="en"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:db="http://docbook.org/ns/docbook"
	>
	
	<title>Design Patterns Used</title>
	
	<para>
		This section exists because I need to write down all the design patterns I have used,
		partly as part of my assignment (as my teachers can have a benefit in understanding the code),
		partly as a reminder for myself,
		but also as concrete real-life examples.
	</para>
	
	<note>
		I cannot say that I follow every pattern to the letter, but I'm fairly sure that they're a close match ;)
	</note>
	
	<para>
		Here is a list of (almost) all design patterns used in RapidDataMapper:
	</para>
	
	<section xml:id="design_patterns.abstract_factory">
		<title>Abstract Factory</title>
		
		<itemizedlist>
			<listitem>
				<para>
					Used by <classname>Db_Mapper</classname> as the extending classes
					(ie. the classes compiled by <classname>Db_Mapper_Builder</classname>)
					create different classes of <classname>Db_MapperQuery</classname>.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.builder">
		<title>Builder</title>
		
		<itemizedlist>
			<listitem>
				<para>
					<classname>Db_Descriptor</classname> (director)
					<classname>Db_CodeBuilder_Composite</classname> (sort-of-builder).
					<classname>Db_CompositeBuilder</classname>, <classname>Db_Mapper_*</classname> classes
					and <classname>Db_MapperQuery_*</classname> classes (except for
					<classname>Db_MapperQuery_Where</classname>) (concrete builders).
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.composite">
		<title>Composite</title>
		
		<itemizedlist>
			<listitem>
				<para>
					<classname>Db_CodeBuilder_Container</classname> and all its descendants are composites;
					they allow multiple instances which are contained inside to create parts of the whole result
					which is to be returned.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.decorator">
		<title>Decorator</title>
		
		<itemizedlist>
			<listitem>
				<para>
					The <classname>Db_Decorator</classname> class which is used by various plugins to
					decorate columns in the <classname>Db_Descriptor</classname>.
				</para>
				
				<para>
					See <function>Db_Descriptor->addDecorator</function> and
					<function>Db_Descriptor->removeDecorator</function> for information
					(the existing plugins provide real-life usage examples).
				</para>
			</listitem>
			
			<listitem>
				<para>
					<classname>Db_Plugin_I18n</classname> use it to remap the columns and to add translations of
					column names.
				</para>
			</listitem>
			
			<listitem>
				<para>
					<classname>Db_Plugin_Sluggable</classname> use it to add the conversion logic.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.facade">
		<title>Façade</title>
		
		<itemizedlist>
			<listitem>
				<para>
					The <classname>Db</classname> class is sort of a façade because it hides the mappers
					for the common usage.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.factory_method">
		<title>Factory Method</title>
		
		<itemizedlist>
			<listitem>
				<para>
					<classname>Db_Descriptor</classname> with its <function>Db_Descriptor->newColumn</function>,
					<function>Db_Descriptor->newPrimaryKey</function> and <function>Db_Descriptor->newRelation</function>.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.flyweight">
		<title>Flyweight</title>
		
		<itemizedlist>
			<listitem>
				<para>
					<classname>Db_Descriptor</classname> instances use the Flyweight pattern,
					as they are managed by the <classname>Db</classname> class with one instance per described
					object.
					<classname>Db</classname> does not either allow two instances describing the same class,
					but it allows multiple instances of the same class (ie. <classname>Db_Decorator</classname>
					or a descendant).
				</para>
			</listitem>
			
			<listitem>
				<para>
					<classname>Db_Connection</classname> instances also use the Flyweight pattern
					for the same reasons as <classname>Db_Descriptor</classname> does it.
					The only difference is what they do; <classname>Db_Connection</classname> holds a connection
					while <classname>Db_Descriptor</classname> hold mapping data.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.template_method">
		<title>Template Method</title>
		
		<itemizedlist>
			<listitem>
				<para>
					<classname>Db_Descriptor</classname> with its <function>Db_Descriptor->newColumn</function>,
					<function>Db_Descriptor->newPrimaryKey</function> and <function>Db_Descriptor->newRelation</function>.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.singleton">
		<title>Singleton</title>
		
		<itemizedlist>
			<listitem>
				<para>
					<classname>Db_Mapper</classname> objects which are fetched with
					<function>Db::getMapper</function> is not strictly a singleton, mainly because there are no
					hard restrictions upon the number of instances.
					Instead it is only implied that it is a singleton.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<section xml:id="design_patterns.strategy">
		<title>Strategy</title>
		
		<itemizedlist>
			<listitem>
				<para>
					<classname>Db</classname> as it uses different <classname>Db_Driver_*</classname> classes
					depending on the database which it should connect to.
				</para>
			</listitem>
			
			<listitem>
				<para>
					<!-- TODO: Remove "will" when the cache system is made -->
					
					<classname>Db_Connection</classname> will have different cache drivers for query caching.
				</para>
			</listitem>
			
			<listitem>
				<para>
					<classname>Db_Descriptor_Relation</classname> as it aggregates a different object depending
					on the type of relation (<classname>Db_Descriptor_Relation_*</classname>).
				</para>
			</listitem>
		</itemizedlist>
	</section>
</appendix>