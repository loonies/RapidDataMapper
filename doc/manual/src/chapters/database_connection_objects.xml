<?xml version="1.0" encoding="utf-8"?>
<chapter
	version="5.0"
	xml:id="chapter.database_connection_objects"
	xml:lang="en"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:db="http://docbook.org/ns/docbook"
	>
	
	<title>Database Connection Objects</title>
	
	<section>
		<title>What is a Connection Object?</title>
		
		<para>
			A connection object is an object managing a connection to the database.
			The connection is wrapped in that object and the object provides methods which interacts with the database
			and it also contains a few convenience methods.
		</para>
		
		<para>
			RapidDataMapper has separate objects handling the specific interactions with the database.
			This provides a separate layer of abstraction, which can easily be swapped to provide support for another database.
		</para>
		
		<para>
			The database connection objects are managed by the <classname>Db</classname> class, a combination of the flyweight and singleton pattern.
			This because it only allows one instance per configuration, but several instances per class
			(because it allows several connections using the same driver).
		</para>
		
		<para>
			If you use the <glossterm>Object-Relational-Mapper</glossterm> you will probably not use this layer directly in most cases.
		</para>
	</section>
	
	<section>
		<title>Fetching a Connection Object</title>
		
		<para>
			The Connection objects are instantiated when they are requested.
			All the requests are made by calling <function>Db::getConnection()</function> which will return the
			connection instance after it has been instantiated (if it already is instantiated it will simply return
			the already instantiated object).
		</para>
		
		<funcsynopsis xml:id="funcref.Db-getConnection">
			<funcprototype>
				<funcdef><type>Db_Connection</type> <function>Db::getConnection</function></funcdef>
				
				<paramdef choice="opt"><type>string</type> <parameter>$name</parameter> = 'default'</paramdef>
			</funcprototype>
		</funcsynopsis>
		
		<example>
			<title>Fetching a Connection Object</title>
			
			<programlisting language="php"><![CDATA[// fetching the default connection
$default_connection = Db::getConnection();

// fetching a specific connection:
$foo_connection = Db::getConnection('foo');]]></programlisting>
		</example>
		
		<para>
			You can change the name of the default connection using
			<function linkend="funcref.Db-setDefaultConnectionName">Db::setDefaultConnectionName()</function>.
		</para>
	</section>
	
	<section xml:id="chapter.database_connection_objects.querying">
		<title>Querying the database using a Connection Object</title>
		
		<para>
			Querying the database using the <classname>Db_Connnection</classname> objects
			is pretty straightforward: call <function>Db_Connection->query()</function> with
			the SQL as the first parameter:
		</para>
		
		<example>
			<title>Performing a basic query</title>
			
			<programlisting language="php"><![CDATA[$db = Db::getConnection();

$result = $db->query('SELECT * FROM users');

foreach($result as $row)
{
	// ...
}]]></programlisting>
		</example>
		
		<funcsynopsis xml:id="funcref.Db_Connection-query">
			<funcprototype>
				<funcdef><type>Db_Result</type>|<type>int</type> <function>Db_Connection->query</function></funcdef>
				
				<paramdef><type>string</type> <parameter>$SQL</parameter></paramdef>
				<paramdef choice="opt"><type>associative array</type> <parameter>$binds</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		
		<para>
			The return values differ depending on the type of query: read queries (SELECT and its relatives)
			make <function>Db_Connection->query()</function> return <type>Db_Result</type> objects,
			write queries (INSERT, UPDATE, DELETE and similar) make it return an <type>int</type> which contains the number of modified rows.
		</para>
		
		<example>
			<title>Performing an UPDATE query and checking for modified rows</title>
			
			<programlisting language="php"><![CDATA[$db = Db::getConnection();

// 0 == false, so if 0 rows were modified, the condition below will fail
if($db->query('UPDATE users SET name = "foobar" WHERE id = 2'))
{
	echo 'UPDATE successful!';
}
else
{
	echo 'UPDATE failed';
}]]></programlisting>
		</example>
		
		<section>
			<title>Bound parameters</title>
			
			<para>
				Binds are placeholders in the query which will be replaced with an escaped value which
				is supplied in the <varname>$binds</varname> parameter. The format for anonymous bind placeholders
				are question marks ("<literal>?</literal>"), they will take the bind parameters in the order
				of appearance in the <varname>$binds</varname> array. To use named binds, use a colon followed
				by whitespace, then it will fetch the values from the key with that name in <varname>$binds</varname>.
			</para>
			
			<para>
				If a bind parameter is not found, a <classname>Db_Connection_MissingBindParameterException</classname> is thrown.
				That can be used as a simple validation feature, as it will complain if a parameter is missing.
				(It will also send the name of the missing parameter if it is a  named bind parameter.)
			</para>
			
			<example>
				<title>Using the binds in a SQL query</title>
				
				<programlisting language="php"><![CDATA[$db = Db::getConnection();

// anonymous binds
$r = $db->query('SELECT * FROM users WHERE name = ? AND password = ?', array($_POST['name'], md5(SALT.$_POST['password'])));

// named binds
$r = $db->query('SELECT * FROM users WHERE name = :name AND password = :passwd', $_POST);
// Requested array: array('name' => 'Foo', 'passwd' => 'bar')
]]></programlisting>
			</example>
		</section>
		
		<section>
			<title>Getting the generated id during INSERT queries</title>
			
			<para>
				If a column in a table is marked as auto_increment, then that column will
				receive an auto-generated id when an INSERT query is performed on that table.
				To fetch that id after an INSERT query has been executed, <function>Db_Connection->insertId</function>
				will return the new id:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Connection-insertId">
				<funcprototype>
					<funcdef><type>int</type>|<type>false</type> <function>Db_Connection->insertId</function></funcdef>
					
					<void />
				</funcprototype>
			</funcsynopsis>
			
			<example>
				<title>Fetching the id generated during an insert</title>
				
				<programlisting language="php"><![CDATA[$db = Db::getConnection();

$db->query('INSERT INTO `tracks` SET `name` = \'The Divine Conspiracy\'');

$id = $db->insertId();

echo $id;]]></programlisting>
			</example>
		</section>
	</section>
	
	<section xml:id="chapter.database_connection_objects.Db_Result">
		<title>Db_Result objects, the database return objects</title>
		
		<para>
			Database results are returned wrapped in <classname>Db_Result</classname> objects
			which contain methods for interacting with the database <type>resource</type> and
			fetching its data.
			<classname>Db_Result</classname> implements <classname>IteratorAggregate</classname> and
			<classname>Countable</classname> making it behave a bit like an array at the same time it
			is an object (and it also enables a few performance improvements).
		</para>
		
		<para>
			By default the returned rows are <classname>stdClass</classname> objects which has
			the column names as the property names. Arrays can also be fetched, but objects are
			a slightly bit faster to fetch.
		</para>
		
		<example>
			<title>Basic Db_Result usage</title>
			
			<programlisting language="php"><![CDATA[$result = Db::getConnection()->query('SELECT * FROM tracks');

echo 'Number of rows: '.count($result);

// Using it as an iterator:
foreach($result as $row)
{
	echo $row->name;
}]]></programlisting>
		</example>
		
		<section>
			<title>Iterating the result sets</title>
			
			<para>
				As the <classname>Db_Result</classname> objects implement <classname>IteratorAggregate</classname>
				they can be used by the <literal>foreach</literal> construct.
			</para>
			
			<example>
				<title>Iterating Db_Result</title>
				
				<programlisting language="php"><![CDATA[foreach($result as $row)
{
	print_r($row);
}

// getting the ArrayIterator:
$iterator = $result->getIterator();]]></programlisting>
			</example>
			
			<para>
				Another variant is to extract an array of objects or an array of arrays and
				iterate those, described under <link linkend="chapter.Db_Result.special_cases">Special Cases</link>.
			</para>
		</section>
		
		<section>
			<title>Counting results</title>
			
			<para>
				Use either <function>Db_Result->count</function> or the PHP function <function>count</function>:
			</para>
			
			<programlisting language="php"><![CDATA[$count = count($result);
$count = $result->count();]]></programlisting>
			
			<para>
				The result is the same on both, it is just a question of preference.
			</para>
			
			<para>
				<function>Db_Result->count</function> is also aliased as <function>Db_Result->numRows</function>.
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Result-count">
				<funcprototype>
					<funcdef><type>int</type> <function>Db_Result->count</function></funcdef>
					
					<void />
				</funcprototype>
			</funcsynopsis>
			
			<funcsynopsis xml:id="funcref.Db_Result-numRows">
				<funcprototype>
					<funcdef><type>int</type> <function>Db_Result->numRows</function></funcdef>
					
					<void />
				</funcprototype>
			</funcsynopsis>
		</section>
		
		<section>
			<title>Getting a single value from a result set</title>
			
			<para>
				Usually when you do a <literal>SELECT COUNT(...)</literal> query you get a single column and
				a single row, which means that you have to iterate over a single row to get the result.
				But RapidDataMapper provides a convenience method for this: <function>Db_Result->val</function>.
			</para>
			
			<para>
				<function>Db_Result->val</function> will by default return the first value in the result set
				(first row and first column) as a scalar variable, but can also return an abitrary column-row cell:
			</para>
			
			<example>
				<title>Getting a single value from a Db_Result</title>
				
				<programlisting language="php"><![CDATA[$count = Db::getConnection()->query('SELECT COUNT(1) FROM tracks')->val();

$result = Db::getConnection()->query('SELECT artists.name, COUNT(albums.name)
	FROM artits JOIN albums ON albums.artist_id = artists.id
	GROUP BY artists.name')

$some_album_count = $result->val(1, 2); // third row and second column]]></programlisting>
			</example>
			
			<funcsynopsis xml:id="funcref.Db_Result-val">
				<funcprototype>
					<funcdef><type>mixed</type> <function>Db_Result->val</function></funcdef>

					<paramdef choice="opt"><type>int</type> <parameter>$column</parameter></paramdef>
					<paramdef choice="opt"><type>int</type> <parameter>$row</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
		</section>
		
		<section xml:id="chapter.Db_Result.special_cases">
			<title>Special Cases</title>
			
			<para>
				If you would like to get the result as an array of arrays, you can use <function>Db_Result->resultArray()</function>:
			</para>
			
			<example>
				<title>Getting arrays of arrays as result</title>
				
				<programlisting language="php"><![CDATA[$result = Db::getConnection()->query('SELECT * FROM tracks');
        	
$array = $result->resultArray();]]></programlisting>
			</example>
			
			<example>
				<title>Getting arrays of objects as result</title>
				
				<programlisting language="php"><![CDATA[$resultArr = $resultObj->result();]]></programlisting>
			</example>
			
			<example>
				<title>Fastest iteration using the Db_Result</title>
				
				<para>
					The fastest iteration is made using <function>Db_Result->next</function>:
				</para>
				
				<programlisting language="php"><![CDATA[$result = Db::getConnection()->query('SELECT * FROM tracks');
        	
while($row = $result->next())
{       	
	echo $row->name;
}]]></programlisting>
				
				<para>
					It is only marginally faster when iterating, so the slower iteration
					using <classname>IteratorAggregate</classname> is recommended as it is easier to read and maintain.
				</para>
			</example>
		</section>
	</section>
	
	<section xml:id="chapter.database_connection_objects.transactions">
		<title>Transactions</title>
		
		<para>
			Transactions are groupings of queries which can be done as so called
			atomic-operations; either all goes through correctly or none does.
			The operations are still sent to the database, and the database determines
			if the transaction can be carried through or not.
			If an error occurs, RapidDataMapper will throw an exception.
		</para>
		
		<para>
			To use transactions in RapidDataMapper, first wrap the code
			which is to be made in a single transaction in a
			<token>try</token>-<token>catch</token> block.
			At the beginning of the <token>try</token> block, call
			<function>transactionStart</function> on the appropriate connection object
			(the object you are going to use when issuing the queries) to start
			a transaction:
		</para>
		
		<funcsynopsis xml:id="funcref.Db_Connection-transactionStart">
			<funcprototype>
				<funcdef><type>bool</type> <function>Db_Connection->transactionStart</function></funcdef>
				
				<void />
			</funcprototype>
		</funcsynopsis>
		
		<para>
			Then after all the queries inside the <token>try</token>-block has been
			made and the result is validated as correct (ie. the db contents are correct,
			this is not strictly required as if no exceptions occurred then the db should
			contain the correct data), call <function>transactionCommit</function> to
			commit the operations to the database:
		</para>
		
		<funcsynopsis xml:id="funcref.Db_Connection-transactionCommit">
			<funcprototype>
				<funcdef><type>bool</type> <function>Db_Connection->transactionCommit</function></funcdef>
				
				<void />
			</funcprototype>
		</funcsynopsis>
		
		<para>
			If a database error occurs (for example writes or something similar,
			also note that you can use other exceptions to jump to the <token>catch</token>
			block), then the <token>catch</token>-block will be run, and here we need
			to tell the database to throw away our changes, that is made with
			<function>transactionRollback</function>:
		</para>
		
		<funcsynopsis xml:id="funcref.Db_Connection-transactionRollback">
			<funcprototype>
				<funcdef><type>bool</type> <function>Db_Connection->transactionRollback</function></funcdef>
				
				<void />
			</funcprototype>
		</funcsynopsis>
		
		<example>
			<title>Common transaction usage</title>
			
			<programlisting language="php"><![CDATA[$db = Db::getConnection();

try
{
	$db->transactionStart();
	
	// Issue some queries:
	$db->query(...);
	
	// Everything went fine as we didn't get any exceptions
	$db->transactionCommit();
}
catch(Db_Exception $e) // Only database exceptions this time, change to be able to use a more general scope of error
{
	// Something went wrong, revert our changes:
	$db->transactionRollback();
	
	// Let the rest of the application handle the error:
	throw $e;
}]]></programlisting>
		</example>
	</section>
	
	<section xml:id="chapter.database_connection_objects.database_drivers">
		<title>Database Drivers</title>
		
		<para>
			Currently only MySQL is supported.
		</para>
		
		<!-- TODO: Add more information here -->
	</section>
</chapter>