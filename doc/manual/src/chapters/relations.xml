<?xml version="1.0" encoding="utf-8"?>
<chapter
	version="5.0"
	xml:id="chapter.relations"
	xml:lang="en"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:db="http://docbook.org/ns/docbook"
	>
	
	<title>Relations</title>
	
	<section>
		<title>Introduction</title>
		
		<para>
			As many other Object-Relational-Mappers, RapidDataMapper has built in support for handling
			relations between objects.
			These relations are established in the database as usual practice dictates;
			a foreign key linking to a primary key in another table.
		</para>
		
		<para>
			The relation handling in RapidDataMapper is also very customizable:
			by default it guesses everything from the relation name and the descriptors;
			related class, foreign key, relation type, etc.
		</para>
		
		<para>
			The relation describing code is contained in <classname>Db_Descriptor_Relation</classname>
			(common code) and the classes implementing <classname>Db_Descriptor_RelationInterface</classname>
			(type drivers).
			The <classname>Db_Descriptor_Relation</classname> class is the only class that you have to deal
			with directly, by creating instances using <function>Db_Descriptor->newRelation</function>:
		</para>
		
		<funcsynopsis xml:id="funcref.Db_Descriptor-newRelation">
			<funcprototype>
				<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor->newRelation</function></funcdef>

				<paramdef><type>string</type> <parameter>$relation_name</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		
		<warning>
			<para>
				The <classname>Db_Descriptor_Relation</classname> instance is bound to the
				<classname>Db_Descriptor</classname> which created it
				(because some processing is made in <function>Db_Descriptor->newRelation</function>).
			</para>
			
			<para>
				This means that you can only assign (using
				<function linkend="funcref.Db_Descriptor-add">Db_Descriptor->add</function>)
				the created object to the object which created it.
			</para>
		</warning>
		
		<para>
			The object created by <function>Db_Descriptor->newRelation</function> can either
			be directly assigned to the descriptor, as it will be usable with just a relation
			name (provided that the standard naming convention is followed),
			or you can modify it using several configuration methods
			(differs slightly between different relation types).
		</para>
		
		<example>
			<title>Creating a Has Many relation using defaults</title>
			
			<programlisting language="php"><![CDATA[class ArtistDescriptor extends Db_Descriptor
{
	public function __construct()
	{
		$this->add($this->newPrimaryKey('id'));
		// ...
		
		// The relation name is by default the name of the property which holds the objects
		// by default this links to the track object
		$this->add($this->newRelation('tracks'));
	}
}

class TrackDescriptor extends Db_Descriptor
{
	public function __construct()
	{
		// ...
		
		// Foreign key definition:
		// by default they are named SingularOfLinkedTable_PrimaryKey
		$this->add($this->newColumn('artist_id'));
	}
}]]></programlisting>
		</example>
	</section>
	
	<section>
		<title>Configuring a relation</title>
		
		<para>
			All the relations have a few settings in common,
			as name, related class mapping, property name,
			eager loading etc.
		</para>
		
		<para>
			Here is a list of configuration options and their corresponding setters:
		</para>
		
		<section>
			<title>Relation name</title>
			
			<para>
				The relation name is already set by the
				<function linkend="funcref.Db_Descriptor-newRelation">Db_Descriptor->newRelation</function>
				method.
			</para>
		</section>
		
		<section>
			<title>Property name</title>
			
			<para>
				The property name is the name of the property of the described object which is
				holding the related object(s).
				This is by default the lowercase version of the relation name.
			</para>
			
			<para>
				Setter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-setProperty">
				<funcprototype>
					<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setProperty</function></funcdef>

					<paramdef><type>string</type> <parameter>$prop</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
			
			<para>
				Getter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-getProperty">
				<funcprototype>
					<funcdef><type>string</type> <function>Db_Descriptor_Relation->getProperty</function></funcdef>

					<void />
				</funcprototype>
			</funcsynopsis>
		</section>
		
		<section>
			<title>Related Class Name</title>
			
			<para>
				By default the name of the related class is assumed to be the singular version
				of the relation name.
				Eg. "<literal>Tracks</literal>" will be "<literal>Track</literal>".
			</para>
			
			<para>
				Setter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-setRelatedClass">
				<funcprototype>
					<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setRelatedClass</function></funcdef>

					<paramdef><type>string</type> <parameter>$class_name</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
			
			<para>
				Getter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-getRelatedClass">
				<funcprototype>
					<funcdef><type>string</type> <function>Db_Descriptor_Relation->getRelatedClass</function></funcdef>

					<void />
				</funcprototype>
			</funcsynopsis>
		</section>
		
		<section>
			<title>Eager Loading</title>
			
			<para>
				This adjusts if this relation should be automatically included in all queries
				involving the parent descriptor,
				meaning that if you eg. fetch a <classname>Track</classname> object, the associated
				<classname>Artist</classname> object will also be fetched.
			</para>
			
			<para>
				By default is this set to <symbol>false</symbol>.
			</para>
			
			<para>
				Setter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-setEagerLoading">
				<funcprototype>
					<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setEagerLoading</function></funcdef>

					<paramdef><type>boolean</type> <parameter>$value</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
			
			<para>
				Getter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-getEagerLoading">
				<funcprototype>
					<funcdef><type>boolean</type> <function>Db_Descriptor_Relation->getEagerLoading</function></funcdef>

					<void />
				</funcprototype>
			</funcsynopsis>
			
			<note>
				<para>
					This is not yet implemented in the mapper builder.
					So this setting will not yet have any effect at the generated code.
				</para>
			</note>
		</section>
		
		<section>
			<title>On Delete Action</title>
			
			<para>
				This option adjusts the ON DELETE setting.
				It is a PHP variant of the database constraint which can either delete
				related rows or hinder the deletion if related rows exist.
			</para>
			
			<para>
				This method has two choices: <varname>Db_Descriptor::CASCADE</varname> or
				<varname>Db_Descriptor::RESTRICT</varname>.
			</para>
			
			<para>
				The <varname>Db_Descriptor::CASCADE</varname> constant tells
				<classname>Db_Descriptor_Relation</classname> that the related objects
				also should be deleted when an object is deleted.
				For example, if you delete an artist you may want to have all his tracks
				automatically removed from the tracks table.
			</para>
			
			<para>
				The <varname>Db_Descriptor::RESTRICT</varname> constant tells
				<classname>Db_Descriptor_Relation</classname> that the object
				cannot be deleted while still having related objects.
				For example this can be a good thing when you need to be sure that
				a user has closed all his orders before removing his account.
			</para>
			
			<para>
				By default nothing is performed on the delete
				(well, except for the obvious which is to delete the object and then set
				all related objects' foreign keys to <symbol>null</symbol>).
			</para>
			
			<para>
				Setter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-setOnDeleteAction">
				<funcprototype>
					<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setOnDeleteAction</function></funcdef>

					<paramdef><type>int</type> <parameter>$action</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
			
			<para>
				Getter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-getOnDeleteAction">
				<funcprototype>
					<funcdef><type>int</type> <function>Db_Descriptor_Relation->getOnDeleteAction</function></funcdef>

					<void />
				</funcprototype>
			</funcsynopsis>
			
			<note>
				<para>
					The combination also works and nesting too.
					This means that if one object has cascading delete to another object
					which also has a delete cascading, then a multiple cascade will occur.
				</para>
				
				<para>
					But if a class has a cascade which cascades to a class which has restrict,
					then the restriction will control if the first object can be deleted or not.
				</para>
			</note>
			
			<tip>
				<para>
					This setting is not recommended to be used if you can use
					the ON DELETE ... construct in your database.
					The database will always be faster in this area, even more so when it comes
					to nested cascades (because it interacts directly with the data,
					RapidDataMapper needs to perform several queries for the nested ON DELETE
					actions.)
				</para>
			</tip>
			
			<note>
				<para>
					This is not yet implemented, this setting will not affect the generated code.
				</para>
				
				<para>
					I have made an old implementation (from early summer) that needs to be
					ported to the new architecture.
				</para>
			</note>
		</section>
		
		<section>
			<title>Extra conditions</title>
			
			<para>
				Sometimes you need to specify an additional condition for the relation,
				like if you have several comments, but not all are approved.
			</para>
			
			<para>
				These conditions are added with <function>Db_Descriptor_Relation->setExtraConditions</function>:
			</para>
			
			<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-setExtraConditions">
				<funcprototype>
					<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setExtraConditions</function></funcdef>

					<paramdef><type>string</type> <parameter>$foreign_property_name</parameter></paramdef>
					<paramdef><type>mixed</type> <parameter>$value</parameter></paramdef>
				</funcprototype>
				
				<funcprototype>
					<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setExtraConditions</function></funcdef>

					<paramdef><type>associative array</type> <parameter>$filter</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
			
			<para>
				The first variant filters the <parameter>$foreign_property_name</parameter>
				by <parameter>$value</parameter>.
				Consecutive calls will add additional filters.
			</para>
			
			<para>
				The second variant is much the same, but the key of the array is instead the
				property name and the value the value to match to.
			</para>
			
			<warning>
				<para>
					These extra conditions does not yet reflect when saving a relation.
					Instead you have to make sure that the condition is fulfilled before
					saving it.
				</para>
			</warning>
		</section>
		
		<section>
			<title>Relation Type</title>
			
			<para>
				The relation type is by default guessed based on two factors:
			</para>
			
			<orderedlist>
				<listitem>
					<para>
						If the relation name is plural or not.
					</para>
					
					<para>
						If it is plural, then it is decided that it is a
						<link linkend="chapter.relations.types.has_many">Has Many</link> relation.
						Otherwise it proceeds to step two.
					</para>
					
					<note>
						<para>
							Currently this is only determined by checking for the letter "<literal>s</literal>"
							at the end of the relation name.
							This might be improved in the future.
						</para>
					</note>
				</listitem>
				
				<listitem>
					<para>
						If the parent descriptor has all the foreign keys used by this relation.
					</para>
					
					<para>
						If that is the case, then it is a
						<link linkend="chapter.relations.types.belongs_to">Belongs To</link>
						relation, because another object has the primary keys which link to the parent
						object.
					</para>
					
					<para>
						If it is not the case (note: this applies even if only one of multiple foreign
						keys are missing (RapidDataMapper has multi primary key support)) then it is deemed to be a
						<link linkend="chapter.relations.types.has_one">Has One</link> relation.
					</para>
				</listitem>
			</orderedlist>
		</section>
	</section>
	
	<section>
		<title>Relation Types</title>
		
		<section xml:id="chapter.relations.types.has_many">
			<title>Has Many</title>
			
			<para>
				This relation type is used when you want an object to be able to link
				to several other objects of the same type.
				For example has an artist many tracks.
			</para>
			
			<para>
				This relation is created by adding a foreign key in the related table
				The name of the column(s) is by default the name of the singular of the
				current object + "<literal>_</literal>" + primary key name.
			</para>
			
			<example>
				<title>Defining a Has Many relation</title>
				
				<programlisting language="php"><![CDATA[class ArtistDescriptor extends Db_Descriptor
{
	public function __construct()
	{
		$this->setClass('Artist');
		
		$this->add($this->newPrimaryKey('id'));
		
		// ...
		
		// use the Db_Descriptor::HAS_MANY constant to be sure that it is a has many relation
		$this->add($this->newRelation('tracks')->setType(self::HAS_MANY));
	}
}
class TrackDescriptor extends Db_Descriptor
{
	public function __construct()
	{
		// ...
		$this->add($this->newColumn('artist_id'));
	}
}

class Artist
{
	// ...
	public $tracks = array();
}]]></programlisting>
			</example>
			
			<section>
				<title>Custom foreign key options</title>
				
				<para>
					By default are these links established between the primary keys
					of this object and the foreign keys in the linked object.
					The default naming of the foreign key(s) is/are
					singular + "<literal>_</literal>" + primary key name
					(seen from the object which has the Has Many relation).
				</para>
				
				<para>
					To change this, use <function>Db_Descriptor_Relation->setForeignKeys</function>:
				</para>
				
				<funcsynopsis xml:id="funcref.Db_Descriptor_Relation-setForeignKeys">
					<funcprototype>
						<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setForeignKeys</function></funcdef>
            
						<paramdef><type>string</type> <parameter>$local_property_name</parameter></paramdef>
						<paramdef><type>string</type> <parameter>$foreign_property_name</parameter></paramdef>
					</funcprototype>
					
					<funcprototype>
						<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setForeignKeys</function></funcdef>
            
						<paramdef><type>array</type> <parameter>$local_property_names</parameter></paramdef>
						<paramdef><type>array</type> <parameter>$foreign_property_names</parameter></paramdef>
					</funcprototype>
					
					<funcprototype>
						<funcdef><type>Db_Descriptor_Relation</type> <function>Db_Descriptor_Relation->setForeignKeys</function></funcdef>
            
						<paramdef><type>associative array</type> <parameter>$links</parameter></paramdef>
					</funcprototype>
				</funcsynopsis>
				
				<para>
					The first variant adds a link between the two properties, with
					<parameter>$local_property_name</parameter> in the local object
					and <parameter>$foreign_property_name</parameter> in the related object.
					This variant adds the conditions, it does not remove existing foreign
					key mappings.
				</para>
				
				<para>
					The second variant associates row 1 in the
					<parameter>$local_property_names</parameter> with the first row in
					<parameter>$foreign_property_names</parameter>.
					This variant replaces existing primary key mappings.
				</para>
				
				<para>
					The third variant takes a list of key => value mappings,
					where the key is the local property name and the value the foreign property name.
				</para>
				
				<note>
					<para>
						Technically, the <function>setForeignKeys</function> method is located in
						<classname>Db_Descriptor_Relation_HasMany</classname>, but it is aggregated
						into the <classname>Db_Descriptor_Relation</classname> object.
					</para>
				</note>
			</section>
		</section>
		
		<section xml:id="chapter.relations.types.has_one">
			<title>Has One</title>
			
			<para>
				This is practically a <link linkend="chapter.relations.types.has_many">Has Many</link>
				relation but with the restriction on one related object.
			</para>
			
			<example>
				<title>Defining a Has One relation</title>
				
				<programlisting language="php"><![CDATA[class AlbumDescriptor extends Db_Descriptor
{
	public function __construct()
	{
		$this->setClass('Album');
		
		$this->add($this->newPrimaryKey('id'));
		
		// ...
		
		// use the Db_Descriptor::HAS_ONE constant to be sure that it is a has one relation
		$this->add($this->newRelation('artwork')->setType(self::HAS_ONE));
	}
}
class ArtworkDescriptor extends Db_Descriptor
{
	public function __construct()
	{
		// ...
		$this->add($this->newColumn('album_id'));
	}
}

class Album
{
	// ...
	public $artwork = null;
}]]></programlisting>
			</example>
			
			<para>
				This relationship type has inherited the setting for key mappings from
				Has One, making its syntax identical.
				See the <link linkend="chapter.relations.types.has_many">Has Many</link>
				relationship for more information.
			</para>
		</section>
		
		<section xml:id="chapter.relations.types.belongs_to">
			<title>Belongs To</title>
			
			<para>
				The Belongs To relationship is often used at the receiving end of a 
				<link linkend="chapter.relations.types.has_many">Has Many</link> or a
				<link linkend="chapter.relations.types.has_many">Has One</link>
				relationship.
				This means that the object defining the Belongs To relation type contains
				the foreign keys.
			</para>
			
			<para>
				Example:
			</para>
			
			<example>
				<title>Defining a Belongs to relation</title>
				
				<programlisting language="php"><![CDATA[class TrackDescriptor extends Db_Descriptor
{
	public function __construct()
	{
		$this->setClass('Track');
		
		$this->add($this->newColumn('artist_id'));
		
		// ...
		
		// use the Db_Descriptor::BELONGS_TO constant to be sure that it is a belongs to relation
		$this->add($this->newRelation('artist')->setType(self::BELONGS_TO));
	}
}
class ArtistDescriptor extends Db_Descriptor
{
	public function __construct()
	{
		$this->setClass('Artist');
		$this->add($this->newPrimaryKey('id'));
		// ...
	}
}

class Track
{
	// ...
	public $artist = null;
}]]></programlisting>
			</example>
			
			<para>
				This relation type has inherited the ability to set the foreign keys from the
				Has Many relationship type.
				See the <link linkend="chapter.relations.types.has_many">Has Many</link>
				relationship for more information.
			</para>
		</section>
		
		<section xml:id="chapter.relations.types.has_and_belongs_to_many">
			<title>Has And Belongs To Many</title>
			
			<para>
				The reason this relation type is not auto-detected is the fact that
				it requires more advanced checks, including a database query for existing table.
				This means that we cannot only use PHP to determine the type,
				meaning that it will pose problems if we're to use the descriptors as a template
				for the database structure (it is in the plans to create an automatic
				database table creator/updater for RapidDataMapper).
			</para>
			
			<para>
				TODO: MORE
			</para>
		</section>
	</section>
	
	<section>
		<title>Using Relations</title>
		
		<section>
			<title>Fetching related objects</title>
			
			<para>
				Usually Object-Relational-Mappers implement "auto-magical" loading
				of related objects, this means that you can simply try to fetch a related object by
				referring to its property and the Object-Relational-Mapper will load it automatically.
			</para>
			
			<para>
				RapidDataMapper does <emphasis>NOT</emphasis> support this.
				It is an intentional design decision.
			</para>
			
			<para>
				By not having "auto-magical" loading of related objets you're forced to explicitly call a method
				to load them for you.
				This has several benefits:
			</para>
			
			<itemizedlist>
				<listitem>
					<para>
						You get a clear indication that a query is occurring.
					</para>
				</listitem>
				
				<listitem>
					<para>
						Potential performance issues are easy to spot during development, as you can easily see
						(part of the statement above) that eg. a query is happening inside a loop.
					</para>
				</listitem>
				
				<listitem>
					<para>
						It provides a more strict control over what is fetched from the database.
						What isn't specified is simply not fetched.
					</para>
				</listitem>
				
				<listitem>
					<para>
						It also encourages you to join the related objects to initial queries,
						creating larger JOIN queries but they will only be needed to be run once.
					</para>
				</listitem>
			</itemizedlist>
			
			<note>
				<para>
					"Auto-magical" fetching can still be implemented, but that will have to be made
					by the the user in the mapped objects
					(this is another benefit of releasing the control of the mapped objects (almost)
					completely).
				</para>
			</note>
			
			<section>
				<title>Using the join queries</title>
				
				<para>
					The <classname>Db_MapperQuery</classname> objects has the method
					<function>Db_MapperQuery->related</function> which will join related objects:
				</para>
				
				<funcsynopsis xml:id="funcref.Db_MapperQuery-related">
					<funcprototype>
						<funcdef><type>Db_MapperQuery</type> <function>Db_MapperQuery->related</function></funcdef>

						<paramdef><type>string</type> <parameter>$relation_name</parameter></paramdef>
					</funcprototype>
				</funcsynopsis>
				
				<example>
					<title>Fetching related objects through a join query</title>
					
					<programlisting language="php"><![CDATA[// Artist has many tracks
$r = Db::find('artist')->related('tracks')->get();

foreach($r as $artist)
{
	echo "<h3>{$artist->name}</h3>";
	
	foreach($artist->tracks as $track)
	{
		echo "<p>{$track->name}</p>";
	}
}

// Produced query:
// SELECT [a lot of columns here]
// FROM `artists` AS `artist`
// LEFT JOIN `tracks` AS `artist-tracks` ON `artist-tracks`.`artist_id` = `artist`.`id`]]></programlisting>
				</example>
				
				<para>
					The name of the alias the related object receives is the alias of the
					"parent object" + "<literal>-</literal>" + the relation name.
					This alias is used to refer to columns of the related objects in the query.
				</para>
				
				<example>
					<title>Fetching related objects and filtering by them</title>
					
					<programlisting language="php"><![CDATA[// Artist has many tracks
$r = Db::find('artist')->related('tracks')->like('artist-tracks.name', 'Intro')->get();

// ...

// Produced query:
// SELECT [a lot of columns here]
// FROM `artists` AS `artist`
// LEFT JOIN `tracks` AS `artist-tracks` ON `artist-tracks`.`artist_id` = `artist`.`id`
// WHERE `artist-tracks`.`name` LIKE '%Intro%']]></programlisting>
				</example>
				
				<para>
					RapidDataMapper also has support for multi-level-JOINs,
					meaning that you can fetch an artist, his albums and all tracks in a single query:
				</para>
				
				<example>
					<title>Fetching related objects with a large join query</title>
					
					<programlisting language="php"><![CDATA[// Artist has many albums
// Album has many tracks
$r = Db::find('artist')->related('albums-tracks')->whereIn('artist.name', array('Delain', 'Epica', 'Stream of Passion'))->get();

foreach($r as $artist)
{
	echo "<h2>{$artist->name}</h2>";
	
	foreach($artist->albums as $album)
	{
		echo "<h4>{$album->name}</h4>";
		
		foreach($album->tracks as $track)
		{
			echo "<p>{$track->name}</p>";
		}
	}
}
// note: $artist->tracks is not fetched, as it is not specified nor needed

// Produced Query:
// SELECT [a lot of columns here]
// FROM `artists` AS `artist`
// LEFT JOIN `albums` AS `artist-albums` ON `artist-albums`.`artist_id` = `artist`.`id`
// LEFT JOIN `tracks` AS `artist-albums-tracks` ON `artist-albums-tracks`.`album_id` = `artist-albums`.`id`
// WHERE `artist`.`name` IN ('Delain', 'Epica', 'Stream of Passion')]]></programlisting>
				</example>
			</section>
			
			<section>
				<title>Explicitly use <function>Db::related</function></title>
				
				<para>
					For some times it might be beneficial to not include a fetch of related
					objects in the main query, and for those times we have
					<function>Db::related</function>:
				</para>
				
				<funcsynopsis xml:id="funcref.Db-related">
					<funcprototype>
						<funcdef><type>Db_MapperQuery</type> <function>Db::related</function></funcdef>
						
						<paramdef><type>object</type> <parameter>$object</parameter></paramdef>
						<paramdef><type>string</type> <parameter>$relation_name</parameter></paramdef>
					</funcprototype>
				</funcsynopsis>
				
				<para>
					The first parameter is the object which we're to fetch related objects for.
					The second parameter is the relation name.
				</para>
				
				<warning>
					<para>
						The alias for the related objects is the same as if
						<function linkend="funcref.Db-find">Db::find</function> was used.
						That is, singular of the related object.
					</para>
				</warning>
				
				<example>
					<title>Using <function>Db::related</function> to fetch related objects</title>
					
					<programlisting language="php"><![CDATA[// Track has one artist
$t = Db::find('track', 1);
$a = Db::related($t, 'artist')->getOne();

echo $a->name.' - '.$t->name;

// Produced Query:
// SELECT [a lot of columns here]
// FROM `tracks` AS `track`
// WHERE `track`.`id` = 1
// LIMIT 1

// Produced Query:
// SELECT [a lot of columns here]
// FROM `artists` AS `artist`
// WHERE `artist`.`id` = 45   (this number is gotten from $t->artist_id)]]></programlisting>
				</example>
				
				<para>
					Conditions work just as normal (they are wrapped in parenthesis to prevent
					accidental errors when using "<literal>OR</literal>" in the queries):
				</para>
				
				<example>
					<title>Using <function>Db::related</function> to fetch related objects</title>
					
					<programlisting language="php"><![CDATA[// Track has one artist
$a = Db::find('artist', 1);
$ts = Db::related($t, 'tracks')->where('track.name', 'Cathode Ray Sunshine')->get();

foreach($ts as $t)
{
	echo $a->name.' - '.$t->name;
}

// Produced Query:
// SELECT [a lot of columns here]
// FROM `artists` AS `artist`
// WHERE `artist`.`id` = 1
// LIMIT 1

// Produced Query:
// SELECT [a lot of columns here]
// FROM `tracks` AS `track`
// WHERE `track`.`artist_id` = 1 AND (`track`.`name` = 'Cathode Ray Sunshine')]]></programlisting>
				</example>
			</section>
		</section>
		
		<section>
			<title>Establishing relations</title>
			
			<para>
				To establish relations you simply assign an object of the correct class
				to the relation holding property on a parent object, finally you call
				<function linkend="funcref.Db-save">Db::save</function>:
			</para>
			
			<example>
				<title>Establishing Has One relation between objects</title>
				
				<programlisting language="php"><![CDATA[// Album has one artwork

// assigning a new artwork to a new album:
$a = new Album();
$a->name = 'Absolute Design';

// using existing artist entry
$a->artist = Db::find('artist')->where('name', 'Engel')->getOne();

$ac = new Artwork();
$ac->file = 'filename';

$a->artwork = $ac;

Db::save($a);

// saves the album entry, then the artwork entry, establishing relations between them
// this also applies to the artist (Engel) and the album]]></programlisting>
			</example>
			
			<para>
				As you can see, it is really easy.
				It is not as easy with relations which connect to several related object,
				but almost:
			</para>
			
			<example>
				<title>Establishing Has Many relations between objects</title>
				
				<programlisting language="php"><![CDATA[// Artist has many tracks

$a = new Artist();
$a->name = 'Trail of Tears';

// tracks is a plain array
$a->tracks[] = Db::find('track')->where('name', 'My Comfort')->getOne();

$t = new Track();
$t->name = 'She Weaves Shadows';

$a->tracks[] = $t;

Db::save($a);

// saves the new artist and track, associates them with each other
// and also the existing track is associated with the new artist]]></programlisting>
			</example>
			
			<para>
				The plural relations just consists of plain PHP arrays, making it easy to
				add or remove objects from them. 
			</para>
		</section>
		
		<section>
			<title>Removing relations between objects</title>
			
			<para>
				To remove a singular relation, just set that column to <symbol>null</symbol>.
				If you'd like to replace it, just replace the existing object.
			</para>
			
			<para>
				For plural relations, remove them from the array (<function>unset</function> is
				suitable).
				To remove all, just set the property to an empty array.
				To replace a single object, remove one and add another to the array.
			</para>
			
			<example>
				<title>Removing and replacing related objects</title>
				
				<programlisting language="php"><![CDATA[// Album belongs to artist
// Album has many tracks

// remove the artist
$a = Db::find('album', 4);
$a->artist = null;

Db::save($a);

// replace the artist
$a = Db::find('album', 6);
$a->artist = new Artist();
$a->artist->name = 'Wintersun';

Db::save($a);

// remove some tracks
$a = Db::find('album')->where('id', 5)->related('tracks')->getOne();

// delete something
unset($a->tracks[$i]);

Db::save($a);

// remove all tracks
$a = Db::find('album')->where('id', 1)->related('tracks')->getOne();
$a->tracks = array();

Db::save($a);

// replace some tracks
$a = Db::find('album')->where('id', 8)->related('tracks')->getOne();

// delete something
unset($a->tracks[$i]);

// add something
$t = new Track();
$t->name = 'Insomnia';
$a->tracks[] = $t;

Db::save($a);]]></programlisting>
			</example>
		</section>
	</section>
</chapter>