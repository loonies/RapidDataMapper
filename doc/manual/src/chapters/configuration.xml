<?xml version="1.0" encoding="utf-8"?>
<chapter
	version="5.0"
	xml:id="chapter.configuration"
	xml:lang="en"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:db="http://docbook.org/ns/docbook"
	>
	
	<title>Configuration</title>

	<para>
		RapidDataMapper have three types of configurations, two will be covered in this chapter:
	</para>
	
	<variablelist>
		<varlistentry>
			<term>Connection configurations</term>
			
			<listitem>
				<para>
					Several can exist during runtime, but only one can be the default connection.
				</para>
			</listitem>
		</varlistentry>
		
		<varlistentry>
			<term>Mapper and descriptor management settings</term>
			
			<listitem>
				<para>
					These settings can only have one set of values, and they control how to fetch, save,
					create and store the mappers and descriptors.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
	<para>
		The two types above can be regarded as the lower level of configurations, they dictate how the system works;
		what databases are available and where to store the files.
	</para>
	
	<para>
		For the third configuration type, which are the descriptors, see the
		<link linkend="chapter.descriptors">Descriptors</link> chapter.
	</para>
	
	<section xml:id="chapter.configuration.connection_configurations">
		<title>Connection configurations</title>
		
		<para>
			The connection configurations are managed by the <classname>Db</classname> class.
			They are set by using the <function>Db::setConnectionConfig()</function>:
		</para>
		
		<funcsynopsis xml:id="funcref.Db-setConnectionConfig">
			<funcprototype>
				<funcdef><type>void</type> <function>Db::setConnectionConfig</function></funcdef>
				
				<paramdef><type>string</type> <parameter>$name</parameter></paramdef>
				
				<paramdef><type>array</type> <parameter>$configuration</parameter></paramdef>
			</funcprototype>
			
			<funcprototype>
				<funcdef><type>void</type> <function>Db::setConnectionConfig</function></funcdef>
				
				<paramdef><type>associative array</type> <parameter>$configurations</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		
		<para>
			The configuration is an array containing several of these values:
		</para>
		
		<table>
			<title>Configuration options</title>
			
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Default</entry>
						<entry>Description</entry>
					</row>
				</thead>
				
				<tbody>
					<row>
						<entry>dbdriver</entry>
						<entry><type>string</type></entry>
						<entry></entry>
						<entry>
							The identifier of the database driver, see
							<link linkend="chapter.database_connection_objects.database_drivers">Database Drivers</link>
						</entry>
					</row>
					
					<row>
						<entry>hostname</entry>
						<entry><type>string</type></entry>
						<entry><symbol>null</symbol></entry>
						<entry>The hostname for the database to connect to</entry>
					</row>
					
					<row>
						<entry>username</entry>
						<entry><type>string</type></entry>
						<entry><symbol>null</symbol></entry>
						<entry>The username used when connecting to the database</entry>
					</row>
					
					<row>
						<entry>password</entry>
						<entry><type>string</type></entry>
						<entry><symbol>null</symbol></entry>
						<entry>The password used when connecting to the database</entry>
					</row>
					
					<row>
						<entry>database</entry>
						<entry><type>string</type></entry>
						<entry><symbol>null</symbol></entry>
						<entry>The database name of the database to select</entry>
					</row>
					
					<row>
						<entry>dbprefix</entry>
						<entry><type>string</type></entry>
						<entry>'<literal></literal>'</entry>
						<entry>
							The prefix of the database tables the connection should use,
							automatically used by the <link linkend="chapter.query_builders">Query Builders</link>
						</entry>
					</row>
					
					<row>
						<entry>pconnect</entry>
						<entry><type>boolean</type></entry>
						<entry><symbol>false</symbol></entry>
						<entry>If to use a persistent database connection or not</entry>
					</row>
					
					<row>
						<entry>cache_on</entry>
						<entry><type>boolean</type></entry>
						<entry><symbol>false</symbol></entry>
						<entry>
							If to use <link linkend="chapter.query_caching">query caching</link>,
							they usually also require a few extra options
						</entry>
					</row>
					
					<row>
						<entry>cachedrv</entry>
						<entry><type>string</type></entry>
						<entry>'<literal>file</literal>'</entry>
						<entry>Which type of cache to use, see <link linkend="chapter.query_caching">Query Caching</link></entry>
					</row>
					
					<row>
						<entry>cacheopt</entry>
						<entry><type>array</type></entry>
						<entry><symbol>array()</symbol></entry>
						<entry>Options sent to the cache driver, see <link linkend="chapter.query_caching">Query Caching</link></entry>
					</row>
					
					<row>
						<entry>char_set</entry>
						<entry><type>string</type></entry>
						<entry>'<literal>utf8</literal>'</entry>
						<entry>The character set to use when communicating with the database</entry>
					</row>
					
					<row>
						<entry>dbcollat</entry>
						<entry><type>string</type></entry>
						<entry>'<literal>utf8_unicode_ci</literal>'</entry>
						<entry>The database collation to use when comparing values in the database</entry>
					</row>
					
					<row>
						<entry>redirect_write</entry>
						<entry><type>boolean</type> or <type>string</type></entry>
						<entry><symbol>false</symbol></entry>
						<entry>
							If to redirect write queries to another connection, and which connection in that case (<type>string</type>).
							Useful for master/slave database server arrays.
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		
		<note>
			Keep in mind that the configuration options might vary depending on the type of database driver.
		</note>
		
		<warning>
			The <option>dbdriver</option> option must be set, otherwise RapidDataMapper will not know what driver to use
			and an <firstterm linkend="glossary.exception">exception</firstterm> will be thrown.
		</warning>
		
		<example>
			<title>Configuring a connection to a MySQL database with the least amount of options</title>
			
			<programlisting language="php"><![CDATA[Db::setConnectionConfig('default',
	array(
		'dbdriver' => 'mysql',
		'hostname' => 'localhost',
		'username' => 'sample_user',
		'password' => 'samplepasswd',
		'database' => 'sample_db'
		)
	);]]></programlisting>
		</example>
		
		<example>
			<title>Supplying an array as the only parameter of Db::setConnectionConfig()</title>
			
			<programlisting language="php"><![CDATA[Db::setConnectionConfig(
	array(
		'default' => array(
			'dbdriver' => 'mysql',
			'hostname' => 'localhost',
			'username' => 'sample_user',
			'password' => 'samplepasswd',
			'database' => 'sample_db',
			'redirect_write' => 'write'
			),
		'write' => array(
			'dbdriver' => 'mysql',
			'hostname' => 'master_db',
			'username' => 'master_user',
			'password' => 'master_passwd',
			'database' => 'master'
			)
		)
	);]]></programlisting>
		</example>
		
		<para>
			By default the default database connection is named '<literal>default</literal>',
			and it will be loaded if no database has been named in the call to
			<function linkend="funcref.Db-getConnection">Db::getConnection()</function>.
		</para>
		
		<para>
			To change this, use the <function>Db::setDefaultConnectionName()</function> method:
		</para>
		
		<funcsynopsis xml:id="funcref.Db-setDefaultConnectionName">
			<funcprototype>
				<funcdef><type>void</type> <function>Db::setDefaultConnectionName</function></funcdef>
				
				<paramdef><type>string</type> <parameter>$name</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</section>
	
	<section xml:id="chapter.configuration.mapper_and_descriptor_management">
		<title>Mapper and Descriptor management settings</title>
		
		<para>
			<glossterm>Descriptor</glossterm>s are the third type of configuration which RapidDataMapper uses.
			Descriptors are usually not entered into the <classname>Db</classname> class,
			instead they are loaded when they are needed.
		</para>
		
		<section>
			<title>How descriptors are loaded</title>
			
			<para>
				Descriptors can be found in four ways:
			</para>
			
			<orderedlist>
				<listitem>
					<para>
						First it checks an internal array containing already loaded descriptors,
						descriptors can be added to this array using
						<function linkend="funcref.Db-addDescriptor">Db::addDescriptor()</function>,
						see <link linkend="chapter.descriptors">Descriptors</link> for more information.
					</para>
				</listitem>
				
				<listitem>
					<para>
						It checks if there is a registered descriptor loaderâ€”a
						<firstterm linkend="glossary.callback">callback</firstterm> which will return
						a valid descriptor.
						See <link linkend="chapter.alternatives_to_the_db_descriptor">Alternatives to the Db_Descriptor</link>
						for more information.
					</para>
				</listitem>
				
				<listitem>
					<para>
						Then it checks if a class with the name of "<varname>class</varname>Descriptor" exists.
					</para>
				</listitem>
				
				<listitem>
					<para>
						Finally it tries to load a file with the name "<varname>class</varname>.php" from
						the directory set by
						<function linkend="funcref.Db-setDescriptorDirectory">Db::setDescriptorDirectory()</function>.
					</para>
				</listitem>
			</orderedlist>
			
			<para>
				If all the attempts above fails when loading a descriptor, a <classname>Db_DescriptorException</classname>
				<glossterm>exception</glossterm> is thrown.
			</para>
			
			<para>
				See <link linkend="chapter.descriptors.associating">Descriptors:
				Associating descriptors with the class to be mapped</link> for examples and typical usage
				information.
			</para>
		</section>
		
		<section>
			<title>Setting the Descriptor Loader</title>
			
			<para>
				The descriptor loader is set by this method:
			</para>
			
			<funcsynopsis xml:id="funcref.Db-setDescriptorLoader">
				<funcprototype>
					<funcdef><type>void</type> <function>Db::setDescriptorLoader</function></funcdef>
					
					<paramdef><type>callback</type> <parameter>$callable</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
			
			<para>
				The supplied <glossterm>callback</glossterm> should return an instance of
				<classname>Db_Descriptor</classname> or an instance of a child class of it <classname>Db_Descriptor</classname>.
			</para>
		</section>
		
		<section>
			<title>Setting the descriptor directory</title>
			
			<para>
				The descriptor directory is a directory which contains the descriptors
				named in the following scheme: "<varname>class</varname>.php".
			</para>
			
			<para>
				The path is set by the following method:
			</para>
			
			<funcsynopsis xml:id="funcref.Db-setDescriptorDirectory">
				<funcprototype>
					<funcdef><type>void</type> <function>Db::setDescriptorDirectory</function></funcdef>
					
					<paramdef><type>string</type> <parameter>$path</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
		</section>
		
		<section>
			<title>Controlling the caching of the mappers</title>
			
			<para>
				The mappers are generated and hence they can be cached from one execution to the next
				to avoid having to recreate them every time (actually, regeneration of mappers in a
				normal production environment should never happen or be needed).
			</para>
			
			<para>
				The mappers are stored in a folder defined by
				<function linkend="funcref.Db-setMapperCacheDir">Db::setMapperCacheDir()</function>
				and it must be writeable by the PHP process running RapidDataMapper
				(write access can then be revoked once RapidDataMapper has generated the final
				(production) mappers, provided they shouldn't be changed).
			</para>
			
			<para>
				To activate caching of the mappers, first set a folder to store the mappers in with
				<function>Db::setMapperCacheDir()</function>:
			</para>
			
			<funcsynopsis xml:id="funcref.Db-setMapperCacheDir">
				<funcprototype>
					<funcdef><type>void</type> <function>Db::setMapperCacheDir</function></funcdef>
					
					<paramdef><type>string</type> <parameter>$path</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
			
			<para>
				If the folder is not writeableâ€”and no cached mapper is foundâ€”RapidDataMapper will use <function>eval()</function>
				to evaluate the generated code instead of using the cache directory.
			</para>
			
			<para>
				To start caching, call <function>Db::setCompileMappers()</function> with <symbol>true</symbol>
				as the first parameter:
			</para>
			
			<funcsynopsis xml:id="funcref.Db-setCompileMappers">
				<funcprototype>
					<funcdef><type>void</type> <function>Db::setCompileMappers</function></funcdef>
					
					<paramdef><type>boolean</type> <parameter>$value</parameter></paramdef>
				</funcprototype>
			</funcsynopsis>
			
			<para>
				If <parameter>$value</parameter> is set to <symbol>true</symbol>, then the mapper management
				method will try to save generated mappers in the mapper caching directory.
				If that fails, it will use <function>eval()</function> to still be able to use the mapper(s).
			</para>
			
			<para>
				If <parameter>$value</parameter> is set to <symbol>false</symbol>, then the mapper management
				method will <function>eval()</function> the generated code right away, not even attempting to
				check for a cached mapper.
			</para>
			
			<para>
				Setting <function>Db::setCompileMappers</function> to <symbol>false</symbol> is a good thing
				to do while developing, as the <glossterm>descriptors</glossterm>â€”and therefore also the
				mappersâ€”might change during development.
			</para>
		</section>
	</section>
</chapter>


