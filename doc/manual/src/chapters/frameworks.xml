<?xml version="1.0" encoding="utf-8"?>
<chapter
	version="5.0"
	xml:id="chapter.frameworks"
	xml:lang="en"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:db="http://docbook.org/ns/docbook"
	>
	
	<title>Framework Usage</title>
	
	<para>
		This is a chapter dedicated to useful information which is specific to the framework you are using.
	</para>
	
	<!-- TODO: Add more information -->
	
	<section>
		<title>CodeIgniter</title>
		
		<para>
			The CodeIgniter compatibility files (located in <filename>compat/CodeIgniter/</filename> directory)
			replace the "<literal>$this->db</literal>" object with the default database connection
			(the value of <function linkend="funcref.Db-getConnection">Db::getConnection</function>).
			This makes it fairly straightforward to utilize the database connection and query building
			objects.
		</para>
		
		<para>
			The main differences compared to the default CodeIgniter database abstraction are:
		</para>
		
		<itemizedlist>
			<listitem>
				<para>
					The method naming, CodeIgniter uses <function>underscored_names</function> while
					RapidDataMapper uses <function>camelCaseNames</function>.
				</para>
			</listitem>
			
			<listitem>
				<para>
					The connection object of RapidDataMapper creates query building instances instead
					of being the query builder itself (as CodeIgniter's "ActiveRecord" does).
				</para>
			</listitem>
			
			<listitem>
				<para>
					The code builders have to explicitly be switched to a "no-escape" mode with a method
					(<function linkend="funcref.Db_Query-escape">Db_Query->escape</function>)
					instead of passing a boolean switch to the method as CodeIgniter does.
				</para>
			</listitem>
			
			<listitem>
				<para>
					A different syntax is used to construct sql queries with the query building objects.
				</para>
			</listitem>
		</itemizedlist>
		
		<para>
			The included <classname>MY_Loader</classname> class registers a specific autoloader
			for classes which tries to load classes from the <filename>application/data_models/</filename>
			directory.
			Here it is recommended to place all your data objects and descriptors.
		</para>
		
		<example>
			<title>Example CodeIgniter application structure</title>
			
			<para>
				This is a simplified picture of how a CodeIgniter application using RapidDataMapper might look like:
			</para>
			
			<programlisting>app/
  controllers/
    page.php
  data_model/
    page_obj.php
    page_objdescriptor.php
  models/
    page_model.php
  libraries/	
    Db/
      ...
    Db.php
    MY_Loader.php
    MY_Profiler.php
    MY_Session.php
  views/
    page.php</programlisting>
		</example>
		
		<warning>
			<para>
				As with almost all other CodeIgniter-files, the files in
				<filename>application/data_model/</filename> are lowercased.
			</para>
		</warning>
		
		<note>
			<para>
				The object-relational-mapper of RapidDataMapper is NOT a replacement for the models,
				instead it is to be used as a powerful tool by the models, making it a lot easier with
				the database interaction.
				The purpose of the models is to fetch what the controller is asking for,
				it is not the task of the controller to adjust what is to be included or not when
				performing a database request.
			</para>
		</note>
		
		<tip>
			<para>
				Name your data objects with either a suffix or a prefix to prevent interference
				with controller or model names.
				Then use <function linkend="funcref.Db_Descriptor-setSingular">Db_Descriptor->setSingular</function>
				to set their correct names.
			</para>
		</tip>
		
		<!-- TODO: More information about the specific usage of RDM and CI -->
		
		<note>
			<para>
				This section will be expanded with more material when something comes up.
			</para>
		</note>
	</section>
</chapter>